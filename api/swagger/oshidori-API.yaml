swagger: '2.0'
info:
  version: 0.1.0
  title: oshidori-API-createdSAM
host: mixylav5c0.execute-api.ap-northeast-1.amazonaws.com
basePath: /Development
schemes:
  - https
paths:
  /tasks:
    get:
      operationId: tasks-List
      consumes:
        - application/json
      produces:
        - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/TaskListResponse'
          headers:
            Access-Control-Allow-Origin:
              type: string
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:542233288831:function:${stageVariables.LambdaFunctionName}/invocations
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws_proxy        
    post:
      operationId: tasks-Create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Task
          required: true
          schema:
            $ref: '#/definitions/Task'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Task'
          headers:
            Access-Control-Allow-Origin:
              type: string
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        uri: arn:aws:apigateway:ap-northeast-1:lambda:path/2015-03-31/functions/arn:aws:lambda:ap-northeast-1:542233288831:function:${stageVariables.LambdaFunctionName}/invocations
        passthroughBehavior: when_no_match
        httpMethod: GET
        type: aws_proxy
    options:
      consumes:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  '/tasks/{taskId}':
    get:
      operationId: tasks-Get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Task'
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    delete:
      operationId: tasks-Delete
      consumes:
        - application/json
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    options:
      consumes:
        - application/json
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  '/tasks/{taskId}/keeps':
    get:
      operationId: keeps-List
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/KeepListResponse'
          headers:
            Access-Control-Allow-Origin:
              type: string
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    post:
      operationId: keeps-Create
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: Keep
          required: true
          schema:
            $ref: '#/definitions/Keep'
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Keep'
          headers:
            Access-Control-Allow-Origin:
              type: string
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    options:
      consumes:
        - application/json
      responses:
        '200':
          description: 200 response
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: '''POST,GET,OPTIONS'''
              method.response.header.Access-Control-Allow-Headers: >-
                'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'
              method.response.header.Access-Control-Allow-Origin: '''*'''
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
  '/tasks/{taskId}/keeps/{keepId}':
    get:
      operationId: keeps-Get
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: keepId
          in: path
          required: true
          type: string
        - name: taskId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
          schema:
            $ref: '#/definitions/Keep'
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    delete:
      operationId: keeps-Delete
      consumes:
        - application/json
      parameters:
        - name: keepId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
      security:
        - sigv4: []
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
    options:
      consumes:
        - application/json
      parameters:
        - name: keepId
          in: path
          required: true
          type: string
      responses:
        '200':
          description: 200 response
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: '200'
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: '{"statusCode": 200}'
        type: mock
securityDefinitions:
  sigv4:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: awsSigv4
  oshidori-cognito-userpool-auth:
    type: apiKey
    name: Authorization
    in: header
    x-amazon-apigateway-authtype: cognito_user_pools
    x-amazon-apigateway-authorizer:
      providerARNs:
        - >-
          arn:aws:cognito-idp:ap-northeast-1:542233288831:userpool/ap-northeast-1_skspMo3sj
      type: cognito_user_pools
definitions:
  CommonResponseSchema:
    type: object
    required:
      - response
    properties:
      response:
        type: string
    title: Common Response Schema
  Group:
    required:
      - groupId
    properties:
      groupId:
        type: string
      partnerName:
        type: string
      thema:
        type: object
      members:
        type: array
        items:
          type: object
          properties:
            userId:
              type: string
            attribute:
              type: object
      createDateTime:
        type: string
      createUserId:
        type: string
      updateDateTime:
        type: string
      updateUserId:
        type: string
      deleteDateTime:
        type: string
      deleteUserId:
        type: string
      isDeleted:
        type: string
  Task:
    required:
      - taskId
      - title
    properties:
      taskId:
        type: string
      title:
        type: string
      description:
        type: string
      limit:
        type: string
      tags:
        type: object
        properties:
          items:
            type: array
            items:
              type: string
      imageUrl:
        type: string
      selectedKeepId:
        type: string
      groupId:
        type: string
      ownerId:
        type: string
      createDateTime:
        type: string
      createUserId:
        type: string
      updateDateTime:
        type: string
      updateUserId:
        type: string
      deleteDateTime:
        type: string
      deleteUserId:
        type: string
      isDeleted:
        type: string
  TaskListResponse:
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Task'
  Keep:
    required:
      - name
    properties:
      keepId:
        type: string
      name:
        type: string
      title:
        type: string
      description:
        type: string
      imageUrl:
        type: string
      eval:
        type: object
        properties: {}
      userId:
        type: string
      talkId:
        type: string
      taskId:
        type: string
      createDateTime:
        type: string
      createUserId:
        type: string
      updateDateTime:
        type: string
      updateUserId:
        type: string
      deleteDateTime:
        type: string
      deleteUserId:
        type: string
      isDeleted:
        type: string
  KeepListResponse:
    required:
      - items
    properties:
      items:
        type: array
        items:
          $ref: '#/definitions/Keep'
  Talk:
    required:
      - talkId
    properties:
      talkId:
        type: string
